import{j as e}from"./jsx-runtime-QvZ8i92b.js";import{c as f,a as u}from"./check_box_outline_blank-C3eXZyiA.js";import{E as b}from"./error-BHKM2E7q.js";import{r as k}from"./index-uubelm5h.js";import{S as c}from"./Svg-CUaNRA4q.js";const _=({labelGroup:n,descriptionGroup:r,isRequired:o,options:l,errorMessage:s,onChange:d,type:m="vertical"})=>{const h=k.useId();return e.jsxs("div",{className:"af-checkbox__container",children:[n&&e.jsxs("span",{className:"af-checkbox__label",id:h,children:[n,o&&e.jsx("span",{"aria-hidden":"true",children:"Â *"})]}),r&&e.jsx("span",{className:"af-checkbox__description",children:r}),e.jsx("div",{role:"group",className:`af-checkbox af-checkbox-select af-checkbox-select--${m}`,children:l.map(({label:x,description:i,subtitle:t,icon:p,...a})=>e.jsxs("label",{htmlFor:`id-${a.name}`,children:[e.jsx("input",{type:"checkbox",...a,id:`id-${a.name}`,onChange:d,"aria-invalid":!!s&&!a.disabled}),e.jsxs("div",{className:"af-checkbox__icons",children:[e.jsx(c,{src:f,className:"af-checkbox__unchecked"}),e.jsx(c,{src:u,className:"af-checkbox__checked"})]}),e.jsxs("div",{className:"af-checkbox__content",children:[p,e.jsxs("div",{className:"af-checkbox__content-description",children:[e.jsx("span",{children:x}),i&&e.jsx("span",{children:i}),t&&e.jsx("span",{children:t})]})]})]},a.name))}),s&&e.jsxs("div",{className:"af-checkbox__error","aria-live":"assertive",children:[e.jsx(c,{src:b}),s]})]})};_.__docgenInfo={description:"",methods:[],displayName:"CheckboxSelect",props:{type:{required:!1,tsType:{name:"union",raw:'"vertical" | "horizontal"',elements:[{name:"literal",value:'"vertical"'},{name:"literal",value:'"horizontal"'}]},description:"",defaultValue:{value:'"vertical"',computed:!1}},labelGroup:{required:!1,tsType:{name:"string"},description:""},descriptionGroup:{required:!1,tsType:{name:"string"},description:""},isRequired:{required:!1,tsType:{name:"boolean"},description:""},options:{required:!0,tsType:{name:"Array",elements:[{name:"unknown"}],raw:`({
  label: ReactNode;
  subtitle?: ReactNode;
  description?: ReactNode;
  icon?: ReactNode;
} & React.InputHTMLAttributes<HTMLInputElement>)[]`},description:""},errorMessage:{required:!1,tsType:{name:"string"},description:""},onChange:{required:!1,tsType:{name:"ReactChangeEventHandler",raw:"React.ChangeEventHandler"},description:""}}};export{_ as C};
