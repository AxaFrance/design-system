{
	"[mdx]": {
		"editor.wordWrap": "on"
	},
	"editor.codeActionsOnSave": {
		"source.fixAll.eslint": "explicit",
		"source.fixAll.stylelint": "explicit"
	},
	"github.copilot.chat.commitMessageGeneration.instructions": [
		{
			"text": "Use the Conventional Commits format: <type>[scope]: <description>."
		},
		{ "text": "Allowed types: feat, fix, chore, docs, refactor, test." },
		{ "text": "Type details:" },
		{ "text": "  feat: for new features or significant enhancements." },
		{ "text": "  fix: for bug fixes or corrections." },
		{
			"text": "  chore: for maintenance, tooling, or non-functional changes (not code or docs)."
		},
		{
			"text": "  docs: for documentation changes only (including Storybook MDX)."
		},
		{
			"text": "  refactor: for code changes that neither fix a bug nor add a feature."
		},
		{ "text": "  test: for adding or updating tests only." },
		{
			"text": "The scope must be one of: slash, look&feel, apollo, design-system."
		},
		{
			"text": "slash: for any change in the slash design system (slash folder) or its stories (apps/slash-stories)."
		},
		{
			"text": "apollo: for any change in the apollo design system (client/apollo folder) or its stories (apps/apollo-stories)."
		},
		{
			"text": "look&feel: for any change in the look-and-feel design system (client/look-and-feel folder) or its stories (apps/look-and-feel-stories)."
		},
		{
			"text": "design-system: for global or cross-cutting changes, or changes affecting multiple design systems."
		},
		{
			"text": "If the change affects both the design system and its stories (in apps), use the same scope (e.g.: fix(slash): fix a bug in slash and apps/slash-stories)."
		},
		{
			"text": "For changes affecting multiple design systems, separate scopes with a comma (e.g.: fix(look&feel,apollo): ...)."
		},
		{ "text": "For general project changes, use the design-system scope." },
		{
			"text": "The scopes deps, deps-dev, and release are reserved and must NOT be used."
		},
		{ "text": "Use imperative mood: 'Add feature' not 'Added feature'." },
		{ "text": "Keep the subject line under 70 characters if possible." },
		{ "text": "Do not add a body or footer unless necessary." },
		{ "text": "Valid examples:" },
		{ "text": "  feat(slash): add new component" },
		{ "text": "  fix(look&feel,apollo): fix styles and icons" },
		{ "text": "  chore(design-system): update dependencies" },
		{
			"text": "Special case: When generating a commit message, always analyze all staged or changed files. If any file is related to a design system (by folder or by file name containing identifiers like 'LF' for look&feel or 'Apollo'), you MUST include all relevant scopes in the commit message, separated by a comma. Example: refactor(look&feel,apollo): ..."
		},
		{
			"text": "MANDATORY rules for scope selection (apply in this order):"
		},
		{
			"text": "1. If a file in the apollo folder ends with 'Common', use both apollo and look&feel as scopes, even if the name does not contain 'LF'."
		},
		{
			"text": "2. If a file name contains 'LF', use only look&feel as scope, even if it is in the apollo folder (except for files ending with 'Common', which must use both apollo and look&feel). This rule takes priority over all others except rule 1."
		},
		{
			"text": "3. If a file name contains 'Apollo', use only apollo as scope, even if it is in another folder (except for files ending with 'Common')."
		},
		{
			"text": "4. For all other files, use the scope corresponding to their design system folder (slash, look&feel, apollo) or design-system for global changes."
		},
		{
			"text": "Examples:"
		},
		{
			"text": "  ComponentLF.tsx in apollo: <type>(look&feel): ..."
		},
		{
			"text": "  ComponentCommon.tsx in apollo: <type>(look&feel,apollo): ..."
		},
		{
			"text": "  ComponentApollo.tsx and ComponentLF.tsx: <type>(look&feel,apollo): ..."
		},
		{
			"text": "Apply these rules to every staged or changed file before generating the commit message. This rule takes precedence over all others."
		},
		{
			"text": "When generating a commit message, always analyze all staged or changed files. For each file, determine its relevant scope(s) according to the rules below. The final commit message MUST include the union of all relevant scopes, separated by a comma and sorted alphabetically. Example: feat(look&feel,apollo): ... if both a look&feel and an apollo file are staged."
		}
	]
}
